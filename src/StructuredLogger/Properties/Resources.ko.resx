<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
 <data name="OutputItemParameterMessagePrefix" xml:space="preserve">
<value>Выходных элементов: </value>
</data>
<data name="ProjectImportSkippedEmptyFile" xml:space="preserve">
<value>Проект "{0}" не был импортирован "{1}" в ({2},{3}), так как файл пуст.</value>
</data>
<data name="TaskFound" xml:space="preserve">
<value>Используется задача "{0}" из сборки "{1}".</value>
</data>
<data name="ToolsVersionInEffectForBuild" xml:space="preserve">
<value>Сборка с инструментами версии "{0}".</value>
</data>
<data name="OverridingTarget" xml:space="preserve">
<value>Переопределение целевого объекта "{0}" в проекте "{1}" целевым объект "{2}" из проекта "{3}".</value>
</data>
<data name="TargetSkippedWhenSkipNonexistentTargets" xml:space="preserve">
<value>Целевой объект "{0}" пропущен. Целевой объект не существует в проекте, а SkipNonexistentTargets имеет значение "Истина".</value>
</data>
<data name="ProjectImportSkippedFalseCondition" xml:space="preserve">
<value>Проект "{0}" не был импортирован "{1}" в ({2},{3}) из-за ложного условия; ({4}) вычислено как ({5}).</value>
</data>
<data name="ProjectImportSkippedNoMatches" xml:space="preserve">
<value>Проект "{0}" не был импортирован "{1}" в ({2},{3}), так как совпадающих файлов нет.</value>
</data>
<data name="SearchPathsForMSBuildExtensionsPath" xml:space="preserve">
<value>Пути поиска, используемые для {0}: {1}</value>
</data>
<data name="TaskParameterPrefix" xml:space="preserve">
<value>Параметр задачи:</value>
</data>
<data name="DuplicateImport" xml:space="preserve">
<value>MSB4011: невозможно повторно импортировать "{0}". Он уже был импортирован в "{1}". Скорее всего это связано с ошибкой при написании кода сборки. Повторный импорт будет пропущен. {2}</value>
</data>
<data name="TargetAlreadyCompleteFailure" xml:space="preserve">
<value>Целевой объект "{0}" пропущен. Предыдущая сборка неуспешна.</value>
</data>
<data name="General.OverridingProperties" xml:space="preserve">
<value>Переопределение глобальных свойств для проекта "{0}" с:</value>
</data>
<data name="ItemGroupRemoveLogMessage" xml:space="preserve">
<value>Удалено элементов: </value>
</data>
<data name="ProjectImported" xml:space="preserve">
<value>Импортируется проект "{0}" в проект "{1}" в ({2},{3}).</value>
</data>
<data name="PropertyGroupLogMessage" xml:space="preserve">
<value>Задать свойство: {0}={1}</value>
</data>
<data name="General.AdditionalProperties" xml:space="preserve">
<value>Дополнительные свойства для проекта "{0}":</value>
</data>
<data name="TargetDoesNotExistBeforeTargetMessage" xml:space="preserve">
<value>Целевой объект "{0}", указанный в атрибуте BeforeTargets для "{1}", не существует в проекте и будет пропущен.</value>
</data>
<data name="TaskFoundFromFactory" xml:space="preserve">
<value>Используется задача "{0}" из фабрики заданий "{1}".</value>
</data>
<data name="ProjectImportSkippedMissingFile" xml:space="preserve">
<value>Проект "{0}" не был импортирован "{1}" в ({2},{3}), так как файл не существует.</value>
</data>
<data name="TargetSkippedFalseCondition" xml:space="preserve">
<value>Целевой объект "{0}" пропущен из-за невыполненного условия; выражение ({1}) равно ({2}).</value>
</data>
<data name="TaskSkippedFalseCondition" xml:space="preserve">
<value>Задача "{0}" пропущена из-за невыполненного условия; выражение ({1}) равно ({2}).</value>
</data>
<data name="ItemGroupIncludeLogMessagePrefix" xml:space="preserve">
<value>Добавлено элементов: </value>
</data>
<data name="OutputPropertyLogMessage" xml:space="preserve">
<value>Выходное свойство: {0}={1}</value>
</data>
<data name="ProjectImportSkippedInvalidFile" xml:space="preserve">
<value>Проект "{0}" не был импортирован "{1}" в ({2},{3}), так как файл недопустим.</value>
</data>
<data name="TargetAlreadyCompleteSuccess" xml:space="preserve">
<value>Целевой объект "{0}" пропущен. Предыдущая сборка успешна.</value>
</data>
<data name="TryingExtensionsPath" xml:space="preserve">
<value>Попытка импортировать "{0}" с помощью пути расширений {1}</value>
</data>
<data name="PropertyReassignment" xml:space="preserve">
<value>Повторное назначение свойства: $({0})="{1}" (предыдущее значение: "{2}") для {3}</value>
</data>
<data name="General.GlobalProperties" xml:space="preserve">
<value>Глобальные свойства:</value>
</data>
<data name="General.UndefineProperties" xml:space="preserve">
<value>Удаление свойств:</value>
</data>
<data name="ResolveAssemblyReference.UnifiedPrimaryReference" xml:space="preserve">
<value>Объединенная первичная ссылка "{0}".</value>
</data>
<data name="ResolveAssemblyReference.AssemblyFoldersExSearchLocations" xml:space="preserve">
<value>Расположение AssemblyFoldersEx: "{0}"</value>
</data>
<data name="GetSDKReferenceFiles.ConflictReferenceDifferentSDK" xml:space="preserve">
<value>Конфликт между двумя ссылками с одинаковым именем файла для пакетов SDK "{0}" и "{1}". Выбирается "{2}", а не "{3}", поскольку она была разрешена первой.</value>
</data>
<data name="ResolveAssemblyReference.Dependency" xml:space="preserve">
<value>Зависимость "{0}".</value>
</data>
<data name="ResolveAssemblyReference.PrimaryReference" xml:space="preserve">
<value>Первичная ссылка "{0}".</value>
</data>
<data name="Copy.HardLinkComment" xml:space="preserve">
<value>Создание жесткой связи для копирования "{0}" в "{1}".</value>
</data>
<data name="Copy.DidNotCopyBecauseOfFileMatch" xml:space="preserve">
<value>Копирование из файла "{0}" в файл "{1}" не выполнялось, так как для параметра "{2}" в проекте было задано значение "{3}", а размеры файлов и отметки времени совпадают.</value>
</data>
<data name="ResolveAssemblyReference.SearchPath" xml:space="preserve">
<value>Для SearchPath "{0}".</value>
</data>
<data name="ResolveAssemblyReference.UnifiedDependency" xml:space="preserve">
<value>Объединенная зависимость "{0}".</value>
</data>
<data name="GetSDKReferenceFiles.ConflictReferenceSameSDK" xml:space="preserve">
<value>Конфликт между двумя ссылками с одинаковым именем файла, разрешаемыми в пакете SDK "{0}". Выбирается "{1}", а не "{2}", поскольку она была разрешена первой.</value>
</data>
<data name="GetSDKReferenceFiles.ConflictRedistDifferentSDK" xml:space="preserve">
<value>Конфликт между двумя файлами из папки распространяемого пакета, которые разрешаются в один целевой путь "{0}" для пакетов SDK "{1}" и "{2}". Выбирается "{3}", а не "{4}", поскольку он был разрешен первым.</value>
</data>
<data name="Copy.FileComment" xml:space="preserve">
<value>Копирование файла из "{0}" в "{1}".</value>
</data>
</root>