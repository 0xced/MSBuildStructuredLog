<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
 <data name="OutputItemParameterMessagePrefix" xml:space="preserve">
<value>출력 항목: </value>
</data>
<data name="ProjectImportSkippedEmptyFile" xml:space="preserve">
<value>파일이 비어 있어 ({2},{3})의 "{1}"이(가) "{0}" 프로젝트를 가져오지 않았습니다.</value>
</data>
<data name="TaskFound" xml:space="preserve">
<value>"{1}" 어셈블리에서 "{0}" 작업을 사용합니다.</value>
</data>
<data name="ToolsVersionInEffectForBuild" xml:space="preserve">
<value>도구 버전 "{0}"(을)를 사용하여 빌드하고 있습니다.</value>
</data>
<data name="OverridingTarget" xml:space="preserve">
<value>"{1}" 프로젝트의 "{0}" 대상을 "{3}" 프로젝트의 "{2}" 대상으로 재정의하고 있습니다.</value>
</data>
<data name="TargetSkippedWhenSkipNonexistentTargets" xml:space="preserve">
<value>"{0}" 대상을 건너뛰었습니다. 대상이 프로젝트에 없고 SkipNonexistentTargets가 true로 설정되어 있습니다.</value>
</data>
<data name="ProjectImportSkippedFalseCondition" xml:space="preserve">
<value>false 조건으로 인해 ({2},{3})의 "{1}”이(가) "{0}" 프로젝트를 가져오지 않았습니다. ({4})은(는) ({5})(으)로 확인되었습니다.</value>
</data>
<data name="ProjectImportSkippedNoMatches" xml:space="preserve">
<value>일치하는 파일이 없어 ({2},{3})의 "{1}"이(가) "{0}" 프로젝트를 가져오지 않았습니다.</value>
</data>
<data name="SearchPathsForMSBuildExtensionsPath" xml:space="preserve">
<value>{0}에 사용 중인 검색 경로는 {1}입니다.</value>
</data>
<data name="TaskParameterPrefix" xml:space="preserve">
<value>작업 매개 변수:</value>
</data>
<data name="DuplicateImport" xml:space="preserve">
<value>MSB4011: "{0}"을(를) 다시 가져올 수 없습니다. "{1}"에서 이미 가져왔습니다. 이는 빌드 작성 오류일 가능성이 높으며 이 후속 가져오기는 무시됩니다. {2}</value>
</data>
<data name="TargetAlreadyCompleteFailure" xml:space="preserve">
<value>"{0}" 대상을 건너뜁니다. 이전에 제대로 빌드되지 않았습니다.</value>
</data>
<data name="General.OverridingProperties" xml:space="preserve">
<value>"{0}" 프로젝트의 전역 속성을 다음으로 재정의:</value>
</data>
<data name="ItemGroupRemoveLogMessage" xml:space="preserve">
<value>삭제된 항목: </value>
</data>
<data name="ProjectImported" xml:space="preserve">
<value>"{0}" 프로젝트를 ({2},{3})의 "{1}" 프로젝트로 가져오는 중입니다.</value>
</data>
<data name="PropertyGroupLogMessage" xml:space="preserve">
<value>설정 속성: {0}={1}</value>
</data>
<data name="General.AdditionalProperties" xml:space="preserve">
<value>"{0}" 프로젝트의 추가 속성:</value>
</data>
<data name="TargetDoesNotExistBeforeTargetMessage" xml:space="preserve">
<value>"{1}"의 BeforeTargets 특성에 나열된 "{0}" 대상이 프로젝트에 없으며 무시됩니다.</value>
</data>
<data name="TaskFoundFromFactory" xml:space="preserve">
<value>"{1}" 작업 팩터리에서 "{0}" 작업을 사용합니다.</value>
</data>
<data name="ProjectImportSkippedMissingFile" xml:space="preserve">
<value>파일이 없어 ({2},{3})의 "{1}"이(가) "{0}" 프로젝트를 가져오지 않았습니다.</value>
</data>
<data name="TargetSkippedFalseCondition" xml:space="preserve">
<value>조건이 잘못되어 "{0}" 대상을 건너뜁니다. ({1})이(가) ({2})(으)로 확인되었습니다.</value>
</data>
<data name="TaskSkippedFalseCondition" xml:space="preserve">
<value>조건이 잘못되어 "{0}" 작업을 건너뜁니다. ({1})이(가) ({2})(으)로 확인되었습니다.</value>
</data>
<data name="ItemGroupIncludeLogMessagePrefix" xml:space="preserve">
<value>추가된 항목: </value>
</data>
<data name="OutputPropertyLogMessage" xml:space="preserve">
<value>출력 속성: {0}={1}</value>
</data>
<data name="ProjectImportSkippedInvalidFile" xml:space="preserve">
<value>파일이 잘못되어 ({2},{3})의 "{1}"이(가) "{0}" 프로젝트를 가져오지 않았습니다.</value>
</data>
<data name="TargetAlreadyCompleteSuccess" xml:space="preserve">
<value>"{0}" 대상을 건너뜁니다. 이전에 빌드되었습니다.</value>
</data>
<data name="TryingExtensionsPath" xml:space="preserve">
<value>확장 경로 {1}을(를) 사용하여 {0}을(를) 가져옵니다.</value>
</data>
<data name="PropertyReassignment" xml:space="preserve">
<value>속성 재할당: $({0})={3}의 "{1}"(이전 값: "{2}")</value>
</data>
<data name="General.GlobalProperties" xml:space="preserve">
<value>전역 속성:</value>
</data>
<data name="General.UndefineProperties" xml:space="preserve">
<value>속성 제거:</value>
</data>
<data name="ResolveAssemblyReference.UnifiedPrimaryReference" xml:space="preserve">
<value>통합된 기본 참조 "{0}"입니다.</value>
</data>
<data name="ResolveAssemblyReference.AssemblyFoldersExSearchLocations" xml:space="preserve">
<value>AssemblyFoldersEx 위치: "{0}"</value>
</data>
<data name="GetSDKReferenceFiles.ConflictReferenceDifferentSDK" xml:space="preserve">
<value>"{0}" 및 "{1}" SDK 사이에서 동일한 파일 이름을 사용하는 두 참조 간에 충돌이 발생했습니다. "{3}" 대신 먼저 확인된 "{2}"을(를) 선택합니다.</value>
</data>
<data name="ResolveAssemblyReference.Dependency" xml:space="preserve">
<value>"{0}" 종속성입니다.</value>
</data>
<data name="ResolveAssemblyReference.PrimaryReference" xml:space="preserve">
<value>기본 참조 "{0}"입니다.</value>
</data>
<data name="Copy.HardLinkComment" xml:space="preserve">
<value>"{0}"을(를) "{1}"(으)로 복사하기 위해 하드 링크를 만듭니다.</value>
</data>
<data name="Copy.DidNotCopyBecauseOfFileMatch" xml:space="preserve">
<value>"{2}" 매개 변수가 프로젝트에 "{3}"(으)로 설정되었고 파일 크기와 타임스탬프가 일치하기 때문에 "{0}" 파일에서 "{1}" 파일로 복사할 수 없습니다.</value>
</data>
<data name="ResolveAssemblyReference.SearchPath" xml:space="preserve">
<value>SearchPath "{0}"에 사용됩니다.</value>
</data>
<data name="ResolveAssemblyReference.UnifiedDependency" xml:space="preserve">
<value>통합된 종속성 "{0}"입니다.</value>
</data>
<data name="GetSDKReferenceFiles.ConflictReferenceSameSDK" xml:space="preserve">
<value>"{0}" SDK 내에서 확인된 동일한 파일 이름을 사용하는 두 참조 간에 충돌이 발생했습니다. "{2}" 대신 먼저 확인된 "{1}"을(를) 선택합니다.</value>
</data>
<data name="GetSDKReferenceFiles.ConflictRedistDifferentSDK" xml:space="preserve">
<value>"{1}" 및 "{2}" SDK 사이의 동일한 대상 경로 "{0}"(으)로 이동하는 재배포 가능 패키지 폴더 파일의 두 파일 간에 충돌이 발생했습니다. "{4}" 대신 먼저 확인된 "{3}"을(를) 선택합니다.</value>
</data>
<data name="Copy.FileComment" xml:space="preserve">
<value>"{0}"에서 "{1}"(으)로 파일을 복사하고 있습니다.</value>
</data>
</root>