<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
 <data name="OutputItemParameterMessagePrefix" xml:space="preserve">
<value>Elementos de salida: </value>
</data>
<data name="ProjectImportSkippedEmptyFile" xml:space="preserve">
<value>"{1}" no importó el proyecto "{0}" en ({2},{3}) porque el archivo estaba vacío.</value>
</data>
<data name="TaskFound" xml:space="preserve">
<value>Usando la tarea "{0}" del ensamblado "{1}".</value>
</data>
<data name="ToolsVersionInEffectForBuild" xml:space="preserve">
<value>Compilando con la versión de herramientas "{0}".</value>
</data>
<data name="OverridingTarget" xml:space="preserve">
<value>Invalidando el destino "{0}" del proyecto"{1}" con el destino "{2}" del proyecto "{3}".</value>
</data>
<data name="TargetSkippedWhenSkipNonexistentTargets" xml:space="preserve">
<value>Se omitió el destino "{0}". El destino no existe en el proyecto y SkipNonexistentTargets está configurado en True.</value>
</data>
<data name="ProjectImportSkippedFalseCondition" xml:space="preserve">
<value>"{1}" no importó el proyecto "{0}" en ({2},{3}) debido a una condición false; ({4}) se evaluó como ({5}).</value>
</data>
<data name="ProjectImportSkippedNoMatches" xml:space="preserve">
<value>"{1}" no importó el proyecto "{0}" en ({2},{3}) porque no había archivos coincidentes.</value>
</data>
<data name="SearchPathsForMSBuildExtensionsPath" xml:space="preserve">
<value>Las rutas de búsqueda usadas para {0} son {1}</value>
</data>
<data name="TaskParameterPrefix" xml:space="preserve">
<value>Parámetro de tarea:</value>
</data>
<data name="DuplicateImport" xml:space="preserve">
<value>MSB4011: "{0}" no se puede volver a importar. Ya se importó en "{1}". Lo más probable es que se trate de un error al crear la compilación. Se omitirá esta importación. {2}</value>
</data>
<data name="TargetAlreadyCompleteFailure" xml:space="preserve">
<value>Se omitió el destino "{0}". Compilado previamente de forma incorrecta.</value>
</data>
<data name="General.OverridingProperties" xml:space="preserve">
<value>Las propiedades globales del proyecto "{0}" se reemplazarán con:</value>
</data>
<data name="ItemGroupRemoveLogMessage" xml:space="preserve">
<value>Elementos quitados: </value>
</data>
<data name="ProjectImported" xml:space="preserve">
<value>Importando el proyecto "{0}" en el proyecto "{1}" en ({2},{3}).</value>
</data>
<data name="PropertyGroupLogMessage" xml:space="preserve">
<value>Propiedad establecida: {0}={1}</value>
</data>
<data name="General.AdditionalProperties" xml:space="preserve">
<value>Propiedades adicionales del proyecto "{0}":</value>
</data>
<data name="TargetDoesNotExistBeforeTargetMessage" xml:space="preserve">
<value>El destino "{0}" que aparece en un atributo BeforeTargets en "{1}" no existe en el proyecto y se omitirá.</value>
</data>
<data name="TaskFoundFromFactory" xml:space="preserve">
<value>Se usará la tarea "{0}" del generador de tareas "{1}".</value>
</data>
<data name="ProjectImportSkippedMissingFile" xml:space="preserve">
<value>"{1}" no importó el proyecto "{0}" en ({2},{3}) porque el archivo no existía.</value>
</data>
<data name="TargetSkippedFalseCondition" xml:space="preserve">
<value>Se omitió el destino "{0}" debido a una condición falsa (False); ({1}) se evaluó como ({2}).</value>
</data>
<data name="TaskSkippedFalseCondition" xml:space="preserve">
<value>Se omitió la tarea "{0}" debido a una condición falsa (False); ({1}) se evaluó como ({2}).</value>
</data>
<data name="ItemGroupIncludeLogMessagePrefix" xml:space="preserve">
<value>Elementos agregados: </value>
</data>
<data name="OutputPropertyLogMessage" xml:space="preserve">
<value>Propiedad de salida: {0}={1}</value>
</data>
<data name="ProjectImportSkippedInvalidFile" xml:space="preserve">
<value>"{1}" no importó el proyecto "{0}" en ({2},{3}) porque el archivo no era válido.</value>
</data>
<data name="TargetAlreadyCompleteSuccess" xml:space="preserve">
<value>Se omitió el destino "{0}". Compilado previamente de forma correcta.</value>
</data>
<data name="TryingExtensionsPath" xml:space="preserve">
<value>Intentando importar {0} con la ruta de acceso de extensiones {1}</value>
</data>
<data name="PropertyReassignment" xml:space="preserve">
<value>Reasignación de propiedad: $({0})="{1}" (valor anterior: "{2}") en {3}</value>
</data>
<data name="General.GlobalProperties" xml:space="preserve">
<value>Propiedades globales:</value>
</data>
<data name="General.UndefineProperties" xml:space="preserve">
<value>Quitando propiedades:</value>
</data>
<data name="ResolveAssemblyReference.UnifiedPrimaryReference" xml:space="preserve">
<value>Referencia principal unificada "{0}".</value>
</data>
<data name="ResolveAssemblyReference.AssemblyFoldersExSearchLocations" xml:space="preserve">
<value>Ubicación de AssemblyFoldersEx: "{0}"</value>
</data>
<data name="GetSDKReferenceFiles.ConflictReferenceDifferentSDK" xml:space="preserve">
<value>Hubo un conflicto entre dos referencias con el mismo nombre de archivo entre los SDK "{0}" y "{1}". Se elegirá "{2}" sobre "{3}" porque se resolvió primero.</value>
</data>
<data name="ResolveAssemblyReference.Dependency" xml:space="preserve">
<value>Dependencia "{0}".</value>
</data>
<data name="ResolveAssemblyReference.PrimaryReference" xml:space="preserve">
<value>Referencia principal "{0}".</value>
</data>
<data name="Copy.HardLinkComment" xml:space="preserve">
<value>Creando un vínculo físico para copiar "{0}" en "{1}".</value>
</data>
<data name="Copy.DidNotCopyBecauseOfFileMatch" xml:space="preserve">
<value>No se copió del archivo "{0}" en el archivo "{1}" porque el parámetro "{2}" se estableció como "{3}" en el proyecto y los tamaños y las marcas de tiempo de los archivos coinciden.</value>
</data>
<data name="ResolveAssemblyReference.SearchPath" xml:space="preserve">
<value>Para SearchPath "{0}".</value>
</data>
<data name="ResolveAssemblyReference.UnifiedDependency" xml:space="preserve">
<value>Dependencia unificada "{0}".</value>
</data>
<data name="GetSDKReferenceFiles.ConflictReferenceSameSDK" xml:space="preserve">
<value>Hubo un conflicto entre dos referencias con el mismo nombre de archivo resuelto dentro del SDK "{0}". Se elegirá "{1}" en lugar de "{2}" porque se resolvió primero.</value>
</data>
<data name="GetSDKReferenceFiles.ConflictRedistDifferentSDK" xml:space="preserve">
<value>Conflicto entre dos archivos de la carpeta redist que van a la misma ruta de acceso de destino "{0}" entre los SDK "{1}" y "{2}". Se elegirá "{3}" sobre "{4}" porque se resolvió primero.</value>
</data>
<data name="Copy.FileComment" xml:space="preserve">
<value>Copiando el archivo de "{0}" en "{1}".</value>
</data>
</root>