<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
 <data name="OutputItemParameterMessagePrefix" xml:space="preserve">
<value>Élément(s) en sortie : </value>
</data>
<data name="ProjectImportSkippedEmptyFile" xml:space="preserve">
<value>Le projet "{0}" n’a pas été importé par "{1}" sur ({2},{3}), car le fichier est vide.</value>
</data>
<data name="TaskFound" xml:space="preserve">
<value>Utilisation de la tâche "{0}" à partir de l'assembly "{1}".</value>
</data>
<data name="ToolsVersionInEffectForBuild" xml:space="preserve">
<value>Génération à l'aide des outils version "{0}".</value>
</data>
<data name="OverridingTarget" xml:space="preserve">
<value>Remplacement de la cible "{0}" du projet "{1}" par la cible "{2}" du projet "{3}".</value>
</data>
<data name="TargetSkippedWhenSkipNonexistentTargets" xml:space="preserve">
<value>Cible "{0}" ignorée. La cible n'existe pas dans le projet et SkipNonexistentTargets a la valeur true.</value>
</data>
<data name="ProjectImportSkippedFalseCondition" xml:space="preserve">
<value>Le projet "{0}" n’a pas été importé par "{1}" sur ({2},{3}) en raison d’une fausse condition ; ({4}) a été évalué ({5}).</value>
</data>
<data name="ProjectImportSkippedNoMatches" xml:space="preserve">
<value>Le projet "{0}" n’a pas été importé par "{1}" sur ({2},{3}), car les fichiers ne correspondent pas.</value>
</data>
<data name="SearchPathsForMSBuildExtensionsPath" xml:space="preserve">
<value>Les chemins de recherche utilisés pour {0} sont {1}</value>
</data>
<data name="TaskParameterPrefix" xml:space="preserve">
<value>Paramètre de tâche :</value>
</data>
<data name="DuplicateImport" xml:space="preserve">
<value>MSB4011: "{0}" ne peut pas être réimporté car il a déjà été importé à "{1}". Il s'agit probablement d'une erreur de création de build. Cette importation est ignorée. {2}</value>
</data>
<data name="TargetAlreadyCompleteFailure" xml:space="preserve">
<value>Cible "{0}" ignorée. Elle n'a pas pu être générée.</value>
</data>
<data name="General.OverridingProperties" xml:space="preserve">
<value>Substitution des propriétés globales du projet "{0}" par :</value>
</data>
<data name="ItemGroupRemoveLogMessage" xml:space="preserve">
<value>Élément(s) supprimé(s) : </value>
</data>
<data name="ProjectImported" xml:space="preserve">
<value>Importation du projet "{0}" dans le projet "{1}" sur ({2},{3}).</value>
</data>
<data name="PropertyGroupLogMessage" xml:space="preserve">
<value>Propriété définie : {0}={1}</value>
</data>
<data name="General.AdditionalProperties" xml:space="preserve">
<value>Propriétés supplémentaires du projet "{0}":</value>
</data>
<data name="TargetDoesNotExistBeforeTargetMessage" xml:space="preserve">
<value>La cible "{0}" répertoriée dans un attribut BeforeTargets à "{1}" n'existe pas dans le projet et sera ignorée.</value>
</data>
<data name="TaskFoundFromFactory" xml:space="preserve">
<value>Utilisation de "{0}" à partir de la fabrique de tâches "{1}".</value>
</data>
<data name="ProjectImportSkippedMissingFile" xml:space="preserve">
<value>Le projet "{0}" n’a pas été importé par "{1}" sur ({2},{3}), car le fichier n’existe pas.</value>
</data>
<data name="TargetSkippedFalseCondition" xml:space="preserve">
<value>Cible "{0}" ignorée en raison d'une fausse condition ; ({1}) a été évaluée comme ({2}).</value>
</data>
<data name="TaskSkippedFalseCondition" xml:space="preserve">
<value>Tâche "{0}" ignorée en raison d'une fausse condition ; ({1}) a été évaluée comme ({2}).</value>
</data>
<data name="ItemGroupIncludeLogMessagePrefix" xml:space="preserve">
<value>Élément(s) ajouté(s) : </value>
</data>
<data name="OutputPropertyLogMessage" xml:space="preserve">
<value>Propriété en sortie : {0}={1}</value>
</data>
<data name="ProjectImportSkippedInvalidFile" xml:space="preserve">
<value>Le projet "{0}" n’a pas été importé par "{1}" sur ({2},{3}), car le fichier n’est pas valide.</value>
</data>
<data name="TargetAlreadyCompleteSuccess" xml:space="preserve">
<value>Cible "{0}" ignorée. Elle a été générée.</value>
</data>
<data name="TryingExtensionsPath" xml:space="preserve">
<value>Tentative d'importation de {0} en utilisant le chemin d'extensions {1}</value>
</data>
<data name="PropertyReassignment" xml:space="preserve">
<value>Réassignation de propriété : $({0})="{1}" (valeur précédente : "{2}") à {3}</value>
</data>
<data name="General.GlobalProperties" xml:space="preserve">
<value>Propriétés globales :</value>
</data>
<data name="General.UndefineProperties" xml:space="preserve">
<value>Suppression des propriétés :</value>
</data>
<data name="ResolveAssemblyReference.UnifiedPrimaryReference" xml:space="preserve">
<value>Référence primaire unifiée "{0}".</value>
</data>
<data name="ResolveAssemblyReference.AssemblyFoldersExSearchLocations" xml:space="preserve">
<value>Emplacement d'AssemblyFoldersEx : "{0}"</value>
</data>
<data name="GetSDKReferenceFiles.ConflictReferenceDifferentSDK" xml:space="preserve">
<value>Un conflit s'est produit entre deux références portant le même nom de fichier entre les SDK "{0}" et "{1}". "{2}" est choisi plutôt que "{3}", car il a été résolu en premier.</value>
</data>
<data name="ResolveAssemblyReference.Dependency" xml:space="preserve">
<value>Dépendance "{0}".</value>
</data>
<data name="ResolveAssemblyReference.PrimaryReference" xml:space="preserve">
<value>Référence primaire "{0}".</value>
</data>
<data name="Copy.HardLinkComment" xml:space="preserve">
<value>Création d'un lien physique pour copier "{0}" vers "{1}".</value>
</data>
<data name="Copy.DidNotCopyBecauseOfFileMatch" xml:space="preserve">
<value>Impossible de copier le fichier "{0}" vers le fichier "{1}", car le paramètre "{2}" a la valeur "{3}" dans le projet, et la taille des fichiers et les horodatages correspondent.</value>
</data>
<data name="ResolveAssemblyReference.SearchPath" xml:space="preserve">
<value>Pour SearchPath "{0}".</value>
</data>
<data name="ResolveAssemblyReference.UnifiedDependency" xml:space="preserve">
<value>Dépendance unifiée "{0}".</value>
</data>
<data name="GetSDKReferenceFiles.ConflictReferenceSameSDK" xml:space="preserve">
<value>Un conflit s'est produit entre deux références portant le même nom de fichier résolues dans le SDK "{0}". "{1}" est choisi plutôt que "{2}", car il a été résolu en premier.</value>
</data>
<data name="GetSDKReferenceFiles.ConflictRedistDifferentSDK" xml:space="preserve">
<value>Un conflit s'est produit entre deux fichiers du dossier du package redistribuable pointant vers le même chemin cible "{0}" entre les SDK "{1}" et "{2}". "{3}" est choisi plutôt que "{4}", car il a été résolu en premier.</value>
</data>
<data name="Copy.FileComment" xml:space="preserve">
<value>Copie du fichier de "{0}" vers "{1}".</value>
</data>
</root>